const matriz = require('./matriz');

class cript{

    decString(StringToDecripted){
        const subSequence = StringToDecripted.split('');
        let indexValue = subSequence.length / 4;
        let counter = 0;
        let output = '';
        do {   
            let i = counter * 4;
            if(i == 4){
                i = 0;
            }else if(i > 4){
                i = i - 4
            }
            for(i; i < 4 * counter; i++){
                output += subSequence[i];
            }
            output = output+' ';
            counter++;
        } while (counter <= indexValue);

        const brokenArray = output.trim().split(' ');
        let decriptesString = '';
        for(let w = 0; w < brokenArray.length; w++){
            decriptesString += matriz.hash[brokenArray[w]];
        }
        return decriptesString;
    }

    compare(StringEncripted, StringInstance){
        const decriptedString = this.decString(StringEncripted);
        if(decriptedString == StringInstance){
            return true;
        }else{
            return false;
        }
    }

    encString(StringToEncripted){
        let otherObj = {};
        for(let key in matriz.hash){
           let value = matriz.hash[key];
           otherObj[value] = key;
        }
        const letters = StringToEncripted.split('');
        let enciptedString = '';
        for(let i = 0; i < letters.length; i++){
            enciptedString += otherObj[letters[i]];
        }
        return enciptedString;
    }

    getHash(SpecialCaractere = false, sizeHash){
        const arrayHash = SpecialCaractere == true ? matriz.allusSpecial : matriz.allus;
        const total = arrayHash.length;
        let stringHash = '';
        let random = '';
        for(let i = 0; i < sizeHash; i++){
            let randomNumber = Math.floor(Math.random() * total);
            stringHash += arrayHash[randomNumber];
            random += randomNumber+' - ';
        }
        return {hash: stringHash, randons: random};
    }

}

module.exports = new cript;